// Documentação do PubSubClient 
// https://pubsubclient.knolleary.net/api#setServer

/* IMPORTANTE: É necessário rodar o Wokwi Gateway e habilitar a opção
  "Enable Private Wokwi IoT Gateway" através da tecla de atalho F1 no editor de código.*/

// Importação de bibliotecas necessárias
#include <DHT.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <WiFiClientSecure.h>
#include <FS.h>
#include <LittleFS.h>

// Declaração de variáveis e objetos globais
float temperatura; // Temperatura em graus Fahrenheit
float umidade; // Umidade
WiFiClient espClient;
PubSubClient MQTT(espClient); // Instancia o cliente MQTT passando o espClient

// Declaração dos pinos e do tipo do DHT
#define DHTPIN 4
#define DHTTYPE DHT22

// Atraso da publicação
#define PUBLISH_DELAY 2000

// Parametros do MQTT
const char* MQTT_USERNAME = ""; // Usuário
const char* MQTT_PSWD = ""; // Senha do usuário

// Definir tópicos MQTT
#define TOPIC_T1 "t1" // Tópico

// ID da sessão
#define ID_MQTT "esp32_mqtt"

// Referente a conexão WiFi
const char *SSID = "Wokwi-GUEST"; // Nome da rede
const char *PASSWORD = ""; // Senha 

// Referente ao hivemq
// URL do broker MQTT que se deseja utilizar
const char *BROKER_MQTT = ""; // URL do broker

int BROKER_PORT = 8883; // Porta do Broker MQTT

unsigned long publishUpdate;

// Prototypes
void initWifi(void); // Iniciar e conectar ao Wifi
void initMQTT(void); // Iniciar e conectar-se ao MQTT
void reconnectMQTT(void);
void reconnectWiFi(void);
void checkWiFIAndMQTT(void);

// Inicializa os componentes do sensor DHT
DHT dht(DHTPIN, DHTTYPE);

// Inicializa e conecta-se na rede WI-FI desejada
void initWiFi(void)
{
  delay(10);
  Serial.println("------Conexao WI-FI------");
  Serial.print("Conectando-se na rede: ");
  Serial.println(SSID);
  Serial.println("Aguarde");

  reconnectWiFi();
}

// Inicializa os parâmetros de conexão MQTT(endereço do broker e porta
void initMQTT(void)
{
  while(!MQTT.connected()) {
    MQTT.setServer(BROKER_MQTT, BROKER_PORT);
    Serial.print("Conectando-se ao MQTT, id de usuário -> ");
    Serial.println(ID_MQTT);
    Serial.println("Aguarde");
    if (MQTT.connect(ID_MQTT, MQTT_USERNAME, MQTT_PSWD)) {
      Serial.println("Conectado com sucesso!");
      Serial.println("Inscrevendo-se no tópico");
      MQTT.subscribe(TOPIC_T1);
    } else {
      Serial.println("Falha na conexão, tentando novamente!");
      reconnectMQTT();
    }
  } 
}

// Função para reconectar ao broker MQTT
void reconnectMQTT(void)
{
  while (!MQTT.connected()) {
    Serial.print("Tentando se conectar ao Broker MQTT: ");
    Serial.println(BROKER_MQTT);
    if (MQTT.connect(ID_MQTT, MQTT_USERNAME, MQTT_PSWD)) {
      Serial.println("Conectado com sucesso ao broker MQTT!");
      MQTT.subscribe(TOPIC_T1);
    } else {
      Serial.println("Falha ao reconectar no broker.");
      Serial.println("Nova tentativa de conexao em 2 segundos.");
      delay(2000);
    }
  }
}

// Verifica o estado das conexões WiFI e ao broker MQTT, em caso de desconexão, a conexão é refeita. */
void checkWiFIAndMQTT(void)
{
  if (!MQTT.connected())
    reconnectMQTT(); // se não há conexão com o Broker, a conexão é refeita

  reconnectWiFi(); // se não há conexão com o WiFI, a conexão é refeita
}

void reconnectWiFi(void)
{
  // se já está conectado a rede WI-FI, nada é feito.
  // Caso contrário, são efetuadas tentativas de conexão
  if (WiFi.status() == WL_CONNECTED)
    return;

  WiFi.begin(SSID, PASSWORD); // Conecta na rede WI-FI

  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
    Serial.print(".");
  }

  Serial.println();
  Serial.print("Conectado com sucesso na rede ");
  Serial.print(SSID);
  Serial.println("IP obtido: ");
  Serial.println(WiFi.localIP());
}

void setup() {
  Serial.begin(9600);
  Serial.println(F("Sensor de temperatura!"));  

  dht.begin(); // Inicializar o dht

  initWiFi(); // Iniciar conexão WiFi
  initMQTT(); // Iniciar conexão MQTT
}

void loop() {
  delay(1500);

  // Ler umidade
  umidade = dht.readHumidity();
  
  // Ler temperatura
  temperatura = dht.readTemperature();

  // Verificar se alguma leitura falhou e tentar novamente.
  if (isnan(umidade) || isnan(temperatura)) {
    Serial.println(F("Falha no sensor!"));
    return;
  } 
  
  // Saída
  Serial.println(F("Temperatura: "));
  Serial.print(temperatura);
  Serial.println(F(" \u00B0C"));

  // Publicar o valor de temperatura no tópico do MQTT
  char tempString[6];
  dtostrf(temperatura, 5, 2, tempString); // Converte float para string
  
  MQTT.publish(TOPIC_T1, tempString); // Publica temperatura no tópico MQTT

}
